from itertools import product

from aiogram import Router, F
from aiogram.types import CallbackQuery

from db.db_utils import (
    db_get_user_cart,
    db_get_product_by_name,
    db_update_to_cart,
    db_insert_or_upd_finally_cart,
)
from handlers.users import show_main_menu
from keyboards.inline_kb import add_to_cart, generate_category_menu
from utils.caption import text_for_caption, basket_text

router = Router(name=__name__)


@router.callback_query(F.data.startswith("action"))
async def constructor_change(call: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ caption
    product_name = call.message.caption.split("\n")[0]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    user_cart = db_get_user_cart(call.message.chat.id)
    product = db_get_product_by_name(product_name)

    if not product or not user_cart:
        await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
        return

    action = call.data  # "action+" –∏–ª–∏ "action-"
    quantity = user_cart.total_product

    if action == "action+":
        quantity += 1
        message_text = "‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
    elif action == "action-":
        if quantity <= 1:
            await call.answer("–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–µ–ª—å–∑—è", show_alert=False)
            return
        quantity -= 1
        message_text = "üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω"
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=False)
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    total_price = product.price * quantity
    db_update_to_cart(
        price=total_price,
        quantity=quantity,
        cart_id=user_cart.id,
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = text_for_caption(
        name=product.product_name,
        desc=product.description,
        price=total_price,
    )
    await call.message.edit_caption(
        caption=new_text,
        reply_markup=add_to_cart(user_cart.total_product),
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer(
        message_text,
        show_alert=False,
    )


@router.callback_query(F.data == "quantity")
async def quantity(call: CallbackQuery):
    user_cart = db_get_user_cart(call.message.chat.id)
    quantity = user_cart.total_product
    await call.answer(f"{quantity}", show_alert=False)


@router.callback_query(F.data == "put_into_cart")
async def put_into_cart(call: CallbackQuery):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
    product_name = call.message.caption.split("\n")[0]
    cart = db_get_user_cart(call.message.chat.id)

    await call.message.delete()

    if db_insert_or_upd_finally_cart(
        cart_id=cart.id,
        product_name=product_name,
        total_products=cart.total_product,
        total_price=cart.total_price,
    ):
        await call.message.answer(
            "‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=generate_category_menu(call.message.chat.id),
        )
    else:
        await call.message.answer(
            "üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            reply_markup=generate_category_menu(call.message.chat.id),
        )


@router.callback_query(F.data == "your_basket")
async def show_basket(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    chat_id = call.message.chat.id
    context = basket_text(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")
    if context:
        count, text, *_ = context
        await call.message.answer(text=text)
    else:
        await call.message.answer(text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
