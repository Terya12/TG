from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile


from db.db_utils import (
    db_get_all_category,
    db_get_product_by_id,
    db_get_user_cart,
    db_update_to_cart,
    db_get_product_by_name,
)
from keyboards.inline_kb import (
    show_product_by_category,
    generate_category_menu,
    add_to_cart,
)
from keyboards.reply_kb import share_phone_button
from utils.caption import text_for_caption

router = Router(name=__name__)


@router.callback_query(F.data.startswith("category_"))
async def show_product_button(call: CallbackQuery):
    # –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_id = int(call.data.split("_")[1])
    # message_id = call.message.message_id
    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç",
        reply_markup=show_product_by_category(
            category_id,
        ),
    )


@router.callback_query(F.data.startswith("back_to_categories"))
# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def back_to_categories(call: CallbackQuery):
    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç",
        reply_markup=generate_category_menu(),
    )


@router.callback_query(F.data.startswith("product_"))
async def show_detail_product(call: CallbackQuery):
    # –ü–æ–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
    chat_id = call.message.chat.id
    product_id = int(call.data.split("_")[1])
    product = db_get_product_by_id(product_id)
    await call.message.delete()
    if user_cart := db_get_user_cart(chat_id):
        db_update_to_cart(
            price=product.price,
            cart_id=user_cart.id,
        )
        text = text_for_caption(
            name=product.product_name,
            desc=product.description,
            price=product.price,
        )
        await call.message.answer_photo(
            photo=FSInputFile(path=product.image),
            caption=text,
            reply_markup=add_to_cart(),
        )
    else:
        await call.message.answer(
            text="–ù–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",
            reply_markup=share_phone_button(),
        )


@router.callback_query(F.data.startswith("back_to_products"))
async def back_to_products(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç",
        reply_markup=generate_category_menu(),
    )


@router.callback_query(F.data.startswith("action"))
async def constructor_change(call: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ caption
    product_name = call.message.caption.split("\n")[0]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    user_cart = db_get_user_cart(call.message.chat.id)
    product = db_get_product_by_name(product_name)

    if not product or not user_cart:
        await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    action = call.data  # "action+" –∏–ª–∏ "action-"
    quantity = user_cart.total_product

    if action == "action+":
        quantity += 1
        message_text = "‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
    elif action == "action-":
        if quantity <= 1:
            await call.answer("–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–µ–ª—å–∑—è", show_alert=True)
            return
        quantity -= 1
        message_text = "üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω"
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    total_price = product.price * quantity
    db_update_to_cart(
        price=total_price,
        quantity=quantity,
        cart_id=user_cart.id,
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = text_for_caption(
        name=product.product_name,
        desc=product.description,
        price=total_price,
    )
    await call.message.edit_caption(
        caption=new_text,
        reply_markup=add_to_cart(user_cart.total_product),
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer(
        message_text,
        show_alert=False,
    )
